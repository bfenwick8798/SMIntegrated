import dev.xpple.seedmapper.buildscript.CreateJavaBindingsTask
import dev.xpple.seedmapper.buildscript.GenerateBuildInfoTask
import net.fabricmc.loom.task.prod.ClientProductionRunTask

plugins {
	id 'fabric-loom' version "${fabric_loom_version}"
	id 'maven-publish'
}

base {
	archivesName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group
}

loom {
	accessWidenerPath = file('src/main/resources/seedmapper.aw')
}

repositories {
	mavenCentral()
	maven {
		name = 'xpple'
		url = 'https://maven.xpple.dev/maven2'
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'DJtheRedstoner'
		url = 'https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1'
	}
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		officialMojangMappings {
			nameSyntheticMembers = true
		}
		parchment "org.parchmentmc.data:${project.parchment_mappings}"
	}
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	productionRuntimeMods "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	include modImplementation("dev.xpple:clientarguments:${project.clientarguments_version}")
	include modImplementation("dev.xpple:betterconfig-fabric:${project.betterconfig_version}")
	include modImplementation("dev.xpple:simplewaypoints:${project.simplewaypoints_version}")

	// Xaero's Minimap and WorldMap - local JARs for compile-time access
	// Download these manually from Modrinth and place in libs/ folder:
	// https://modrinth.com/mod/xaeros-minimap/versions
	// https://modrinth.com/mod/xaeros-world-map/versions
	modCompileOnly files('libs/Xaeros_Minimap_25.2.14_Fabric_1.21.9.jar')
	modCompileOnly files('libs/XaerosWorldMap_1.39.17_Fabric_1.21.9.jar')

	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}") {
		exclude group: 'net.fabricmc', module: 'fabric-loader'
	}
	productionRuntimeMods("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}") {
		exclude group: 'net.fabricmc', module: 'fabric-loader'
	}

	testImplementation platform("org.junit:junit-bom:${project.junit_version}")
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.register('createJavaBindings', CreateJavaBindingsTask) {}
compileJava.dependsOn('createJavaBindings')

tasks.register('generateBuildInfo', GenerateBuildInfoTask) {
	outputFile = new File(temporaryDir, "build_info.json")
}

tasks.register("prodClient", ClientProductionRunTask) {
	runDir = file("run")

	jvmArgs.add("-Ddevauth.enabled=true")

	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

processResources {
	def props = [version: project.mod_version, minecraft_version_dependency: project.minecraft_version_dependency, loader_version: project.fabric_loader_version]
	inputs.properties props
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand props
	}

	from("LICENSE") {
		rename {"${it}_${project.base.archivesName.get()}"}
	}

	from("src/main/c/cubiomes/LICENSE") {
		rename {"${it}_cubiomes"}
	}

	from("src/main/c/cubiomes/loot/LICENSE_loot_library.h.txt")

	from generateBuildInfo
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 23
}

java {
	sourceCompatibility = JavaVersion.VERSION_23
	targetCompatibility = JavaVersion.VERSION_23
}

test {
	useJUnitPlatform()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.base.archivesName.get()
			from components.java
		}
	}

	repositories {

	}
}
